{"version":3,"sources":["components/header.js","components/redbutton.js","components/goldbutton.js","components/task.js","components/tasklist.js","components/infobar.js","components/inputfield.js","components/addnewtask.js","service/tasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","style","styles","header","React","Component","color","textAlign","backgroundColor","fontFamily","padding","fontSize","border","borderStyle","borderRadius","marginTop","boxShadow","textShadow","RedButton","delete","type","onClick","this","props","clickHandler","label","paddingLeft","paddingRight","GoldButton","add","Task","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onDoneClicked","bind","assertThisInitialized","onDeleteClicked","onRestoreClicked","completedTask","taskId","onCompleteTaskHandler","taskToDelete","onDeleteTaskHandler","taskToRestore","onRestoreTaskHandler","task","taskNumber","taskDescription","taskDueDate","taskCompleted","goldbutton","redbutton","taskStatus","src","height","opacity","marginBottom","fontStyle","alignItems","moment","require","Tasklist","setTaskStatus","currentListOfTasks","tasks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","pastDue","checkDueDate","dueDate","status","err","return","_this2","mytasks","map","i","components_task","description","format","taskSortDate","key","myTasks","paddingBottom","InfoBar","infobar","items","length","InputField","onTextFieldChange","handleKeyPress","state","inputFieldValue","event","target","setState","inputFieldId","id","changeHandler","charCode","onEnterPressed","input","taskValue","onChange","onKeyPress","placeholder","AddNewTask","onAddClicked","onInputfieldUpdated","alert","taskToAdd","userId","onAddTaskHandler","addTask","inputfield","TasksService","getActiveTasks","_getActiveTasks","asyncToGenerator","regenerator_default","mark","_callee","result","data","wrap","_context","prev","axios","get","sent","abrupt","stop","apply","arguments","getCompletedTasks","_getCompletedTasks","_callee2","_context2","saveTask","_saveTask","_callee3","_context3","post","_x","deleteTask","_deleteTask","_callee4","_context4","_x2","updateTask","_updateTask","_callee5","newTaskDetails","_context5","put","_x3","_x4","App","activeTasks","completedTasks","completeTask","restoreTask","response","insertId","today","Date","setHours","filter","updatedListOfActiveTasks","updatedListOfCompletedTasks","addnewtask","checkPastDueDate","tasklist","setTaskStatusHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13bfd76f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n\r\n    render() {\r\n        return (\r\n        <div  className=\"row\">\r\n        <div className=\"col-sm-4\"></div>\r\n        <div style={styles.header} className=\"my-task-list col-sm-4\"> <p> Task List</p></div>\r\n        \r\n        </div>\r\n        )\r\n}\r\n}\r\n\r\nconst styles = {\r\n    header : {\r\n        color: 'rgba(0,0,26, 0.90)', //51, 0, 25\r\n        textAlign: 'center',\r\n        backgroundColor: 'rgba(230, 230, 255, 0.8)', //  230, 230, 255\r\n        fontFamily: 'Permanent Marker',\r\n        padding:'0.1em',\r\n        fontSize: '4em',\r\n        border: '0.05em',\r\n        borderStyle: 'solid', \r\n        borderRadius: '1em',\r\n        marginTop: '50px',\r\n        boxShadow: '10px 10px',\r\n        textShadow: '1px 1px',\r\n        \r\n        \r\n    }\r\n\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass RedButton extends React.Component{\r\n\r\n    render() {\r\n        return (\r\n          <button style={styles.delete} type=\"button\" onClick={this.props.clickHandler}>{this.props.label} </button>\r\n        )\r\n}\r\n}\r\n\r\nconst styles = {\r\n    delete : {\r\n       backgroundColor: 'rgb(102, 0, 51)',\r\n       color: 'rgba(240, 241, 229, 0.8)',\r\n       borderRadius: '1em',\r\n       paddingLeft: '0.5em',\r\n       paddingRight: '0.5em',\r\n       fontFamily: 'Permanent Marker',\r\n       fontSize: '0.7em'\r\n    }\r\n\r\n};\r\n\r\nexport default RedButton;","import React from 'react';\r\n\r\nclass GoldButton extends React.Component{\r\n\r\n    render() {\r\n        return (\r\n          <button style={styles.add} type=\"button\" onClick={this.props.clickHandler}>{this.props.label}</button>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    add : {\r\n       backgroundColor: 'rgb(153, 115, 0)',\r\n       color: 'rgba(240, 241, 229, 0.8)', //204, 153, 0\r\n       borderRadius: '1em',\r\n       paddingLeft: '0.5em',\r\n       paddingRight: '0.5em',\r\n       fontFamily: 'Permanent Marker',\r\n       fontSize: '0.7em',\r\n       \r\n    }\r\n\r\n};\r\n\r\nexport default GoldButton;","import React from 'react';\r\nimport RedButton from './redbutton';\r\nimport GoldButton from './goldbutton';\r\n\r\nclass Task extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onDoneClicked = this.onDoneClicked.bind(this);\r\n        this.onDeleteClicked = this.onDeleteClicked.bind(this);\r\n        this.onRestoreClicked = this.onRestoreClicked.bind(this);\r\n    }\r\n\r\n    onDoneClicked() {\r\n        const completedTask = this.props.taskId;\r\n        this.props.onCompleteTaskHandler(completedTask);\r\n    }\r\n\r\n    onDeleteClicked(){\r\n        const taskToDelete = this.props.taskId\r\n        this.props.onDeleteTaskHandler(taskToDelete);\r\n    }\r\n\r\n    onRestoreClicked(){\r\n        const taskToRestore = this.props.taskId;\r\n        this.props.onRestoreTaskHandler(taskToRestore);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div style={styles.task} className=\"row\">\r\n          <div className=\"col-sm-1\">{this.props.taskNumber}</div>\r\n          <div className=\"col-sm-4\"> {this.props.taskDescription}</div>\r\n          <div className=\"col-sm-2\">{this.props.taskDueDate}</div>\r\n          {(this.props.taskCompleted === \"false\") &&\r\n          <div className=\"col-sm-2\"> <GoldButton label={'done'} clickHandler={this.onDoneClicked} /> </div>\r\n          }\r\n          {(this.props.taskCompleted === \"true\") &&\r\n          <div className=\"col-sm-2\"> <GoldButton label={'restore'} clickHandler={this.onRestoreClicked} /> </div>\r\n          }\r\n          {(this.props.taskCompleted === \"false\") &&\r\n          <div className=\"col-sm-2\"> <RedButton label={'delete'} clickHandler={this.onDeleteClicked} /></div>\r\n          }\r\n          {(this.props.taskStatus === \"green\") && (this.props.taskCompleted === \"false\") &&\r\n          <div className=\"col-sm-1\"> <img src={'assets/greenicon.png'} height=\"30px\"/>  </div>\r\n          }\r\n          {(this.props.taskStatus === \"red\") && (this.props.taskCompleted === \"false\") &&\r\n          <div className=\"col-sm-1\"> <img src={'assets/redicon.png'} height=\"30px\"/>  </div>\r\n          }\r\n        </div>\r\n          \r\n\r\n        )\r\n}\r\n}\r\n\r\nconst styles = {\r\n    task : {\r\n        color: 'rgba(0, 0, 26, 0.94)',\r\n        textAlign: 'center',\r\n        backgroundColor: 'rgba(230, 230, 255, 0.8)',\r\n        fontFamily: 'Cursive',\r\n        padding: '0.2em',\r\n        fontSize: '1.5em',\r\n        opacity: '50%',\r\n        border: '0.07em',\r\n        borderStyle: 'solid', \r\n        borderRadius: '0.5em',\r\n        marginBottom: '20px',\r\n        fontStyle: 'italic',\r\n        alignItems: 'center',\r\n        boxShadow: '7px 7px'\r\n    }\r\n\r\n};\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './task';\r\nconst moment = require('moment');\r\n\r\nclass Tasklist extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setTaskStatus = this.setTaskStatus.bind(this);\r\n    }\r\n   \r\n    setTaskStatus() {\r\n        let currentListOfTasks = this.props.tasks;\r\n\r\n        for (let task of currentListOfTasks) {\r\n        \r\n           const pastDue =  this.props.checkDueDate(task.dueDate);\r\n            //set status to green for future due date and red for past due date\r\n            if (pastDue) {\r\n                task.status = \"red\";\r\n            } else {\r\n                task.status = \"green\";\r\n            }\r\n        }\r\n        return currentListOfTasks;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const tasks = this.setTaskStatus();\r\n\r\n        return (\r\n            <div style={styles.mytasks} className=\"container\">\r\n                {tasks.map((task, i) =>\r\n                    <Task\r\n                        taskDescription={task.description}\r\n                        taskDueDate={moment(task.dueDate).format(\"Do MMM YY\")}\r\n                        taskSortDate=\"\"\r\n                        key={i}\r\n                        taskNumber={i + 1}\r\n                        taskId={task.taskId}\r\n                        taskCompleted={task.done}\r\n                        onDeleteTaskHandler={this.props.onDeleteTaskHandler}\r\n                        onCompleteTaskHandler={this.props.onCompleteTaskHandler}\r\n                        onRestoreTaskHandler={this.props.onRestoreTaskHandler}\r\n                        taskStatus={task.status}\r\n                    />)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    myTasks: {\r\n        paddingBottom: '5em'\r\n    }\r\n};\r\n\r\n\r\nexport default Tasklist;","import React from 'react';\r\n\r\n\r\nclass InfoBar extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={styles.infobar} className=\"container\" >\r\n                <div className=\"row\">\r\n                    \r\n                    <div className=\"col-sm-3    \"> {this.props.description} </div>\r\n                    <div className=\"col-sm-1\" >{this.props.items.length}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    infobar: {\r\n        color: 'rgba(230, 230, 255, 0.8)', //255, 77, 166\r\n        textAlign: 'left',\r\n        fontFamily: 'Permanent Marker',\r\n        fontSize: '1.7em',\r\n        marginTop: '20px',\r\n        marginBottom: '20px',\r\n        \r\n    }\r\n\r\n};\r\n\r\nexport default InfoBar;","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onTextFieldChange = this.onTextFieldChange.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n\r\n        this.state = {\r\n            inputFieldValue: \"\"\r\n        }\r\n    }\r\n\r\n    onTextFieldChange(event) {\r\n        const inputFieldValue = event.target.value;\r\n        this.setState({ inputFieldValue: inputFieldValue });\r\n\r\n        const inputFieldId = event.target.id;\r\n\r\n        this.props.changeHandler(inputFieldValue, inputFieldId);\r\n    }\r\n\r\n    handleKeyPress(target) {\r\n        if (target.charCode === 13) {\r\n            this.props.onEnterPressed();\r\n        }\r\n\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form >\r\n                <input\r\n                    style={styles.input}\r\n                    type={this.props.type}\r\n                    value={this.props.taskValue}\r\n                    onChange={this.onTextFieldChange}\r\n                    onKeyPress={this.handleKeyPress}\r\n                    placeholder={this.props.placeholder}\r\n                    id={this.props.id}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    input: {\r\n        color: 'rgba(0, 0, 26, 0.94)',\r\n        textAlign: 'center',\r\n        backgroundColor: 'rgba(230, 230, 255, 0.7)',\r\n        fontFamily: 'Cursive',\r\n        fontSize: '0.6em',\r\n        border: '0.07em',\r\n        borderStyle: 'solid',\r\n        borderRadius: '0.5em',\r\n        fontStyle: 'italic',\r\n        boxShadow: '6px 6px'\r\n        \r\n    }\r\n\r\n};\r\n\r\nexport default InputField;","import React from 'react';\r\nimport InputField from './inputfield';\r\nimport GoldButton from './goldbutton';\r\n\r\n\r\nclass AddNewTask extends React.Component {\r\n\r\n    //Constructor\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            taskDescription: \"\",\r\n            dueDate: \"\",\r\n            \r\n        };\r\n\r\n        //event binding functions\r\n        this.onAddClicked = this.onAddClicked.bind(this);\r\n        this.onInputfieldUpdated = this.onInputfieldUpdated.bind(this);\r\n    }\r\n\r\n    //event handling\r\n    onAddClicked() {\r\n        const taskDescription = this.state.taskDescription;\r\n        const dueDate = this.state.dueDate;\r\n\r\n        //Ensure both fields contain an entry - if either field is empty alert user\r\n        if (taskDescription && dueDate) {\r\n            //If due date is past, alert user, otherwise add a new task to the active tasks array\r\n            const pastDue = this.props.checkDueDate(dueDate);\r\n           \r\n            if (pastDue) {\r\n                alert('Please select a valid date; due date cannot be in the past')\r\n            } else {\r\n                const taskToAdd = {\r\n                    description: taskDescription,\r\n                    dueDate: dueDate,\r\n                    done: \"false\",\r\n                    status: \"green\",\r\n                    userId: 1\r\n                };\r\n                \r\n                this.props.onAddTaskHandler(taskToAdd);\r\n    \r\n                this.setState({\r\n                    taskDescription: \"\",\r\n                    dueDate: \"\"\r\n                });\r\n            }\r\n        } else {\r\n            alert(\"Please enter task description and select due date before clicking 'add'\");\r\n        }\r\n    }\r\n\r\n\r\n    onInputfieldUpdated(inputFieldValue, inputFieldId) {\r\n        if (inputFieldId === \"taskInput\") {\r\n            this.setState({ taskDescription: inputFieldValue });\r\n        } else if (inputFieldId === \"dateInput\") {\r\n            this.setState({ dueDate: inputFieldValue });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"container\">\r\n                <div style={styles.addTask} className=\"row\">\r\n\r\n                <div className=\"col-sm-1\"> </div>\r\n                   \r\n                    <div className=\"col-sm-1\">Task: </div>\r\n\r\n                    <div className=\"col-sm-3\">\r\n                        <InputField\r\n                            taskValue={this.state.taskDescription}\r\n                            changeHandler={this.onInputfieldUpdated}\r\n                            onEnterPressed={this.onAddClicked}\r\n                            placeholder=\"enter new task\"\r\n                            type=\"text\"\r\n                            id=\"taskInput\"\r\n                        />\r\n                    </div>\r\n\r\n\r\n                    <div className=\"col-sm-1\">Due: </div>\r\n\r\n                    <div className=\"col-sm-3\">\r\n                        <InputField\r\n                            taskValue={this.state.dueDate}\r\n                            changeHandler={this.onInputfieldUpdated}\r\n                            onEnterPressed={this.onAddClicked}\r\n                            placeholder=\"enter due date\"\r\n                            type=\"date\"\r\n                            id=\"dateInput\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"col-sm-2\">\r\n                        <GoldButton\r\n                            clickHandler={this.onAddClicked}\r\n                            label={'add'}\r\n\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    addTask: {\r\n        color: 'rgba(230, 230, 255, 0.8)', //\r\n        textAlign: 'left',\r\n        fontFamily: 'Permanent Marker',\r\n        fontSize: '1.7em',\r\n        marginTop: '40px',\r\n        marginBottom: '50px',\r\n        alignItems: 'center'\r\n       \r\n    }\r\n};\r\n\r\nexport default AddNewTask\r\n\r\n","import axios from 'axios';\r\n\r\nconst TasksService = {\r\n    async getActiveTasks() {\r\n        let result = await axios.get(\"https://751kf1hfs1.execute-api.eu-west-2.amazonaws.com/dev/tasks/active\");\r\n        let data = await result.data;\r\n        return data;\r\n    },\r\n\r\n    async getCompletedTasks() {\r\n        let result = await axios.get(\"https://751kf1hfs1.execute-api.eu-west-2.amazonaws.com/dev/tasks/done\");\r\n        let data = await result.data;\r\n        return data;\r\n    },\r\n\r\n    async saveTask(task) {\r\n        let result = await axios.post(\"https://751kf1hfs1.execute-api.eu-west-2.amazonaws.com/dev/tasks\", task);\r\n        return result;\r\n    },\r\n\r\n    async deleteTask(taskId) {\r\n        let result = await axios.delete(\"https://751kf1hfs1.execute-api.eu-west-2.amazonaws.com/dev/tasks/\"+taskId);\r\n        return result;\r\n    },\r\n\r\n    async updateTask(taskId, newTaskDetails) {\r\n        let result = await axios.put(\"https://751kf1hfs1.execute-api.eu-west-2.amazonaws.com/dev/tasks/\"+taskId, newTaskDetails);\r\n        return result;\r\n    }\r\n};\r\n\r\nexport default TasksService;","import React, { Component } from 'react';\r\nimport Header from './components/header';\r\nimport Tasklist from './components/tasklist';\r\nimport InfoBar from './components/infobar';\r\nimport AddNewTask from './components/addnewtask';\r\nimport TasksService from './service/tasks';\r\nimport Axios from 'axios';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTasks: [],\r\n      completedTasks: []\r\n    };\r\n\r\n    this.addTask = this.addTask.bind(this);\r\n    this.deleteTask = this.deleteTask.bind(this);\r\n    this.completeTask = this.completeTask.bind(this);\r\n    this.restoreTask = this.restoreTask.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const activeTasks = await TasksService.getActiveTasks();\r\n    const completedTasks = await TasksService.getCompletedTasks();\r\n    this.setState({ activeTasks: activeTasks });\r\n    this.setState({ completedTasks: completedTasks });\r\n  }\r\n\r\n\r\n\r\n  async addTask(task) {\r\n    const response = await TasksService.saveTask(task);\r\n    task.taskId = response.data.insertId;\r\n\r\n    let currentListOfTasks = await TasksService.getActiveTasks();\r\n\r\n    this.setState({\r\n      activeTasks: currentListOfTasks\r\n    });\r\n  }\r\n\r\n  checkPastDueDate(dueDate) {\r\n    //get today's date and set time to 00:00\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    //change dueDate to date format\r\n    const compareDate = new Date(dueDate)\r\n    //if the dueDate is in the past, return true\r\n    if (today > compareDate) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  async deleteTask(taskId) {\r\n    await TasksService.deleteTask(taskId);\r\n\r\n    let currentListOfTasks = await TasksService.getActiveTasks();\r\n\r\n    this.setState({\r\n      activeTasks: currentListOfTasks\r\n    })\r\n  }\r\n\r\n\r\n  async completeTask(taskId) {\r\n    let currentListOfTasks = await TasksService.getActiveTasks();\r\n    const newTaskDetails = currentListOfTasks.filter((task) => task.taskId === taskId)[0];\r\n    newTaskDetails.done = \"true\";\r\n\r\n    await TasksService.updateTask(taskId, newTaskDetails);\r\n\r\n    let updatedListOfActiveTasks = await TasksService.getActiveTasks();\r\n    let updatedListOfCompletedTasks = await TasksService.getCompletedTasks();\r\n    this.setState({\r\n      activeTasks: updatedListOfActiveTasks,\r\n      completedTasks: updatedListOfCompletedTasks\r\n    })\r\n  }\r\n\r\n\r\n  async restoreTask(taskId) {\r\n    let currentListOfTasks = await TasksService.getCompletedTasks();\r\n    const newTaskDetails = currentListOfTasks.filter((task) => task.taskId === taskId)[0];\r\n      newTaskDetails.done = \"false\";\r\n\r\n    await TasksService.updateTask(taskId, newTaskDetails);\r\n\r\n    let updatedListOfActiveTasks = await TasksService.getActiveTasks();\r\n    let updatedListOfCompletedTasks = await TasksService.getCompletedTasks();\r\n    this.setState({\r\n      activeTasks: updatedListOfActiveTasks,\r\n      completedTasks: updatedListOfCompletedTasks\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header />\r\n        <AddNewTask onAddTaskHandler={this.addTask} checkDueDate={this.checkPastDueDate} />\r\n        <hr />\r\n        <InfoBar description=\"Active Tasks\" items={this.state.activeTasks} />\r\n        <Tasklist\r\n          tasks={this.state.activeTasks}\r\n          onDeleteTaskHandler={this.deleteTask}\r\n          onCompleteTaskHandler={this.completeTask}\r\n          setTaskStatusHandler={this.setTaskStatus}\r\n          checkDueDate={this.checkPastDueDate}\r\n        />\r\n        <hr />\r\n        <InfoBar description=\"Completed Tasks\" items={this.state.completedTasks} />\r\n        <Tasklist tasks={this.state.completedTasks} onRestoreTaskHandler={this.restoreTask} checkDueDate={this.checkPastDueDate} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}